#===============================================================================
# Docker Compose File für die lokale Entwicklung. Startet die folgenden Dienste:
#
#  * Ein MongoDB, die im internen Container-Netz für die anderen Container unter
#    dem Hostnamen "mongodb" auf dem Standardport 27017 erreichbar ist.
#
#  * Ein grafisches Admin-Werkzeug für Mongo, das unter http://localhost:8081
#    im Browser aufgerufen werden kann
#
#  * Eine NodeJS-Laufzeitumgebung, in welcher der Backend-Quellcode ausgeführt
#    wird. Änderungen am Quellcode führen zu einem automatischen Neustart des
#    Services. Der REST-Webservice kann unter http://localhost:3000 aufgerufen
#    werden. Unter dem Standardport 9229 kann sich ein JavaScript-Debugger
#    (z.B. aus dem Chrome Dev Tools) verbinden.
#
#  * Eine NodeJS-Laufzeitumgebung, in welcher der Frontend-Quellcode gebaut
#    und unter der Adresse http://localhost:8080 zum Aufruf im Browser
#    bereitgestellt wird. Auch hier führen Änderungen am Quellcode zu einem
#    automatischen Neustart, so dass lediglich im Browser die Seite neugeladen
#    werden muss.
#
# Stand 02/2022 wäre es auch möglich gewesen, die Dienste für Entwicklung und
# Produktivbetrieb in einem einzigen Docker Compose File zu bündeln, und anhand
# von Profilen zu unterscheiden, ob die Entwicklungs- oder Produktivservices
# gestartet werden sollen. Vgl. https://docs.docker.com/compose/profiles/
# Dies wird aktuell aber noch nicht von dem unter Linux verbreiteten Tool
# "podman-compose" unterstützt, so dass wir hier weiterhin getrennte Dateien
# verwenden.
#===============================================================================
version: "3.9"

services:
    # MongoDB-Datenbank
    mongodb1:
        image: mongo
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: dbuser
            MONGO_INITDB_ROOT_PASSWORD: dbpass
        volumes:
            - dbdata1:/data/db
            - dbconfig1:/data/configdb
        ports:
            - 27017:27017

    mongodb2:
        image: mongo
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: dbuser
            MONGO_INITDB_ROOT_PASSWORD: dbpass
        volumes:
            - dbdata2:/data/db
            - dbconfig2:/data/configdb
        ports:
            - 27018:27018

    # Admin-GUI für MongoDB
    mongo-gui1:
        image: mongo-express
        restart: always
        ports:
            - 8081:8081
        environment:
            ME_CONFIG_MONGODB_ADMINUSERNAME: admin
            ME_CONFIG_MONGODB_ADMINPASSWORD: admin
            ME_CONFIG_MONGODB_URL: mongodb://dbuser:dbpass@mongodb:27017/
            
    mongo-gui2:
        image: mongo-express
        restart: always
        ports:
            - 8082:8082
        environment:
            ME_CONFIG_MONGODB_ADMINUSERNAME: admin
            ME_CONFIG_MONGODB_ADMINPASSWORD: admin
            ME_CONFIG_MONGODB_URL: mongodb://dbuser:dbpass@mongodb:27018/
    # HelpingHands-Backend (Entwicklungsmodus)
    backendHilfsanzeigen:
        depends_on:
            - mongodb1
        image: node:17-alpine
        restart: always
        environment:
            HOST: "::"
            PORT: 3000
            MONGODB: mongodb://dbuser:dbpass@mongodb:27017/
        ports:
            - 3000:3000
            - 9229:9229
        volumes:
            - ./BackendHilfsanzeigen:/app
        working_dir: /app
        command: sh -c "npm i; npm start"

    backendBenutzer:
        depends_on:
            - mongodb2
        image: node:17-alpine
        restart: always
        environment:
            HOST: "::"
            PORT: 3001
            MONGODB: mongodb://dbuser:dbpass@mongodb:27018/
        ports:
            - 3001:3001
            - 9230:9230
        volumes:
            - ./Backend:/app
        working_dir: /app
        command: sh -c "npm i; npm start"


    # HelpingHands-Frontend (Entwicklungsmodus)
#    frontend:
#        container_name: frontend
#        build: ./Frontend/helpinghandsapp
#        volumes:
#            - './:/app'
#            - '/app/node_modules'
#        ports:
#                - 8080:8080
#        stdin_open: true
#        environment:
#            - CHOKIDAR_USEPOLLING=true
#        command: npm start



volumes:
    dbdata1:
    dbconfig1:
    dbdata2:
    dbconfig2:
